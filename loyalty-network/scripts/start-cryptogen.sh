#!/bin/bash

# ===================================================================================
# Script tri·ªÉn khai m·∫°ng Hyperledger Fabric - CRYPTOGEN VERSION
# S·ª≠ d·ª•ng cryptogen thay v√¨ fabric-ca ƒë·ªÉ tr√°nh l·ªói MSP mismatch
# ===================================================================================

set -e

# --- M√†u s·∫Øc cho output ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# --- Bi·∫øn to√†n c·ª•c ---
BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CONFIG_DIR="$BASE_DIR/config"
DOCKER_DIR="$BASE_DIR/docker"
NETWORK_DIR="$BASE_DIR/network"
ORGANIZATIONS_DIR="$NETWORK_DIR/organizations"
CHANNEL_ARTIFACTS_DIR="$NETWORK_DIR/channel-artifacts"
SYSTEM_GENESIS_DIR="$NETWORK_DIR/system-genesis-block"
COMPOSE_FILE="$DOCKER_DIR/docker-compose-cryptogen.yaml"
CHANNEL_NAME="loyaltychannel"

# TH√äM C√ÅC BI·∫æN SAU:
CRYPTO_CONFIG_DIR="$CONFIG_DIR"
CRYPTO_CONFIG_FILE="$CONFIG_DIR/crypto-config.yaml"
CONFIGTX_FILE="$CONFIG_DIR/configtx.yaml"

# ===================================================================================
# Ki·ªÉm tra c√°c file c·∫•u h√¨nh
# ===================================================================================
echo -e "${YELLOW}Debug paths:${NC}"
echo "BASE_DIR: $BASE_DIR"
echo "CONFIG_DIR: $CONFIG_DIR"
echo "CRYPTO_CONFIG_DIR: $CRYPTO_CONFIG_DIR"
echo "CRYPTO_CONFIG_FILE: $CRYPTO_CONFIG_FILE"
echo "File exists: $(ls -la "$CRYPTO_CONFIG_FILE" 2>/dev/null || echo "NOT FOUND")"

# ===================================================================================
# FUNCTIONS
# ===================================================================================

function clearNetwork() {
  echo -e "${YELLOW}üî• D·ª´ng v√† d·ªçn d·∫πp m·∫°ng...${NC}"
  
  # D·ª´ng t·∫•t c·∫£ containers
  if [ -f "$COMPOSE_FILE" ]; then
    docker compose -f "$COMPOSE_FILE" down --volumes --remove-orphans 2>/dev/null || true
  fi
  
  # X√≥a containers th·ªß c√¥ng n·∫øu c·∫ßn
  docker rm -f $(docker ps -aq --filter "name=orderer.loyalty.com|peer0.bank.loyalty.com|peer1.bank.loyalty.com|cli|couchdb0|couchdb1" 2>/dev/null) 2>/dev/null || true
  
  # X√≥a networks c≈©
  docker network rm loyalty_network 2>/dev/null || true
  docker network rm loyalty-net 2>/dev/null || true
  docker network rm loyalty-cryptogen 2>/dev/null || true
  
  # X√≥a volumes
  docker volume rm $(docker volume ls -q --filter "name=orderer.loyalty.com|peer0.bank.loyalty.com|peer1.bank.loyalty.com" 2>/dev/null) 2>/dev/null || true
  
  # X√≥a th∆∞ m·ª•c network
  sudo rm -rf "$NETWORK_DIR" 2>/dev/null || true
  sleep 2
  
  echo -e "${GREEN}‚úÖ ƒê√£ d·ªçn d·∫πp ho√†n to√†n.${NC}"
}

function createDirectoryStructure() {
  echo -e "${BLUE}üìÅ T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c...${NC}"
  
  mkdir -p "$ORGANIZATIONS_DIR"
  mkdir -p "$CHANNEL_ARTIFACTS_DIR"
  mkdir -p "$SYSTEM_GENESIS_DIR"
  
  echo -e "${GREEN}‚úÖ C·∫•u tr√∫c th∆∞ m·ª•c ƒë√£ ƒë∆∞·ª£c t·∫°o${NC}"
}

function generateCryptoMaterial() {
  echo -e "${BLUE}üîê T·∫°o crypto material b·∫±ng cryptogen...${NC}"
  
  # S·ª≠ d·ª•ng absolute path thay v√¨ cd
  cryptogen generate \
    --config="$CRYPTO_CONFIG_DIR/crypto-config.yaml" \
    --output="$ORGANIZATIONS_DIR"
  
  if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Crypto material ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng${NC}"
  else
    echo -e "${RED}‚ùå Kh√¥ng th·ªÉ t·∫°o crypto material${NC}"
    echo -e "${YELLOW}Ki·ªÉm tra file config: $CRYPTO_CONFIG_DIR/crypto-config.yaml${NC}"
    exit 1
  fi
  
  # Copy admin certificates v√†o organization MSP
  echo -e "${YELLOW}üìã Copy admin certificates...${NC}"
  
  # Copy BankOrg admin cert
  cp "$ORGANIZATIONS_DIR/peerOrganizations/bank.loyalty.com/users/Admin@bank.loyalty.com/msp/signcerts/"* \
     "$ORGANIZATIONS_DIR/peerOrganizations/bank.loyalty.com/msp/admincerts/"
  
  # Copy OrdererOrg admin cert
  mkdir -p "$ORGANIZATIONS_DIR/ordererOrganizations/loyalty.com/msp/admincerts"
  cp "$ORGANIZATIONS_DIR/ordererOrganizations/loyalty.com/users/Admin@loyalty.com/msp/signcerts/"* \
     "$ORGANIZATIONS_DIR/ordererOrganizations/loyalty.com/msp/admincerts/"
  
  if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Admin certificates ƒë√£ ƒë∆∞·ª£c copy${NC}"
  else
    echo -e "${RED}‚ùå Kh√¥ng th·ªÉ copy admin certificates${NC}"
    exit 1
  fi
}

function generateChannelArtifacts() {
  echo -e "${BLUE}üì¶ T·∫°o channel artifacts...${NC}"
  
  # T·∫°o genesis block
  echo -e "${YELLOW}T·∫°o genesis block...${NC}"
  configtxgen \
    -profile LoyaltyGenesisProfile \
    -channelID system-channel \
    -outputBlock "$SYSTEM_GENESIS_DIR/genesis.block" \
    -configPath "$CONFIG_DIR"
  
  if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Kh√¥ng th·ªÉ t·∫°o genesis block${NC}"
    exit 1
  fi
  
  # T·∫°o channel transaction
  echo -e "${YELLOW}T·∫°o channel transaction...${NC}"
  configtxgen \
    -profile LoyaltyChannelProfile \
    -outputCreateChannelTx "$CHANNEL_ARTIFACTS_DIR/${CHANNEL_NAME}.tx" \
    -channelID "$CHANNEL_NAME" \
    -configPath "$CONFIG_DIR"
  
  if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Kh√¥ng th·ªÉ t·∫°o channel transaction${NC}"
    exit 1
  fi
  
  # T·∫°o anchor peer update
  echo -e "${YELLOW}T·∫°o anchor peer update...${NC}"
  configtxgen \
    -profile LoyaltyChannelProfile \
    -outputAnchorPeersUpdate "$CHANNEL_ARTIFACTS_DIR/BankOrgMSPanchors.tx" \
    -channelID "$CHANNEL_NAME" \
    -asOrg BankOrg \
    -configPath "$CONFIG_DIR"
  
  if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Kh√¥ng th·ªÉ t·∫°o anchor peer update${NC}"
    exit 1
  fi
  
  echo -e "${GREEN}‚úÖ Channel artifacts ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng${NC}"
}

function waitForContainers() {
  echo -e "${YELLOW}‚è≥ Ch·ªù containers kh·ªüi ƒë·ªông...${NC}"
  
  local containers=("orderer.loyalty.com" "peer0.bank.loyalty.com" "peer1.bank.loyalty.com" "cli")
  
  for container in "${containers[@]}"; do
    echo -e "${YELLOW}Ki·ªÉm tra $container...${NC}"
    
    # ƒê·ª£i container running v√† healthy
    for i in {1..60}; do
      if docker ps --filter "name=$container" --filter "status=running" | grep -q "$container"; then
        echo -e "${GREEN}‚úÖ $container ƒëang ch·∫°y${NC}"
        
        # ƒê·ª£i th√™m ƒë·ªÉ container s·∫µn s√†ng
        if [[ "$container" == *"peer"* ]]; then
          echo -e "${YELLOW}ƒê·ª£i $container s·∫µn s√†ng...${NC}"
          sleep 10
        fi
        break
      fi
      echo -n "."
      sleep 3
    done
    
    # Ki·ªÉm tra logs cho l·ªói
    echo -e "${YELLOW}Ki·ªÉm tra logs c·ªßa $container...${NC}"
    local error_logs=$(docker logs "$container" 2>&1 | grep -i "error\|fatal\|panic" | tail -3)
    if [ -n "$error_logs" ]; then
      echo -e "${RED}‚ùå $container c√≥ l·ªói:${NC}"
      echo "$error_logs"
    else
      echo -e "${GREEN}‚úÖ $container logs OK${NC}"
    fi
  done
  
  # Ki·ªÉm tra port b·∫±ng docker exec v√† netstat (n·∫øu c√≥)
  echo -e "${YELLOW}Ki·ªÉm tra ports...${NC}"
  docker exec peer0.bank.loyalty.com netstat -ln | grep :7051 || echo "Port 7051 kh√¥ng ƒë∆∞·ª£c l·∫Øng nghe"
  docker exec orderer.loyalty.com netstat -ln | grep :7050 || echo "Port 7050 kh√¥ng ƒë∆∞·ª£c l·∫Øng nghe"
}

function startNetwork() {
  echo -e "${BLUE}üöÄ Kh·ªüi ƒë·ªông m·∫°ng...${NC}"
  
  # Kh·ªüi ƒë·ªông t·∫•t c·∫£ services c√πng l√∫c
  docker compose -f "$COMPOSE_FILE" up -d
  
  echo -e "${YELLOW}ƒê·ª£i 60s cho t·∫•t c·∫£ containers kh·ªüi ƒë·ªông ho√†n to√†n...${NC}"
  sleep 60
  
  # Ki·ªÉm tra tr·∫°ng th√°i containers
  echo -e "${YELLOW}Ki·ªÉm tra tr·∫°ng th√°i containers...${NC}"
  docker ps --filter "name=orderer.loyalty.com|peer0.bank.loyalty.com|peer1.bank.loyalty.com|cli"
  
  # Ki·ªÉm tra logs containers
  local containers=("orderer.loyalty.com" "peer0.bank.loyalty.com" "peer1.bank.loyalty.com")
  for container in "${containers[@]}"; do
    if ! docker ps --filter "name=$container" --filter "status=running" | grep -q "$container"; then
      echo -e "${RED}‚ùå $container kh√¥ng ch·∫°y. Logs:${NC}"
      docker logs "$container" 2>&1 | tail -10
    else
      echo -e "${GREEN}‚úÖ $container ƒëang ch·∫°y${NC}"
      # Ki·ªÉm tra c√≥ l·ªói g√¨ trong logs kh√¥ng
      local errors=$(docker logs "$container" 2>&1 | grep -i "fatal\|panic" | tail -3)
      if [ -n "$errors" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è $container c√≥ c·∫£nh b√°o:${NC}"
        echo "$errors"
      fi
    fi
  done
  
  echo -e "${GREEN}‚úÖ Qu√° tr√¨nh kh·ªüi ƒë·ªông ho√†n t·∫•t${NC}"
}

function createAndJoinChannel() {
  echo -e "${BLUE}üîó T·∫°o v√† tham gia channel...${NC}"
  
  # T·∫°o channel
  echo -e "${YELLOW}T·∫°o channel '$CHANNEL_NAME'...${NC}"
  docker exec cli peer channel create \
    -o orderer.loyalty.com:7050 \
    -c "$CHANNEL_NAME" \
    -f "/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/${CHANNEL_NAME}.tx" \
    --outputBlock "/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/${CHANNEL_NAME}.block" \
    --tls \
    --cafile "/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/ordererOrganizations/loyalty.com/orderers/orderer.loyalty.com/tls/ca.crt"
  
  if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Channel '$CHANNEL_NAME' ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng${NC}"
  else
    echo -e "${RED}‚ùå Kh√¥ng th·ªÉ t·∫°o channel${NC}"
    exit 1
  fi
  
  # Join peer0 v√†o channel
  echo -e "${YELLOW}Tham gia peer0.bank.loyalty.com v√†o channel...${NC}"
  docker exec \
    -e CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/bank.loyalty.com/users/Admin@bank.loyalty.com/msp \
    -e CORE_PEER_ADDRESS=peer0.bank.loyalty.com:7051 \
    -e CORE_PEER_LOCALMSPID=BankOrgMSP \
    -e CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/bank.loyalty.com/peers/peer0.bank.loyalty.com/tls/ca.crt \
    cli peer channel join \
    -b "/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/${CHANNEL_NAME}.block" \
    --tls \
    --cafile "/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/ordererOrganizations/loyalty.com/orderers/orderer.loyalty.com/tls/ca.crt"
  
  if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ peer0.bank.loyalty.com ƒë√£ tham gia channel th√†nh c√¥ng${NC}"
  else
    echo -e "${RED}‚ùå peer0.bank.loyalty.com kh√¥ng th·ªÉ tham gia channel${NC}"
    exit 1
  fi
  
  # Join peer1 v√†o channel
  echo -e "${YELLOW}Tham gia peer1.bank.loyalty.com v√†o channel...${NC}"
  docker exec \
    -e CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/bank.loyalty.com/users/Admin@bank.loyalty.com/msp \
    -e CORE_PEER_ADDRESS=peer1.bank.loyalty.com:8051 \
    -e CORE_PEER_LOCALMSPID=BankOrgMSP \
    -e CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/bank.loyalty.com/peers/peer1.bank.loyalty.com/tls/ca.crt \
    cli peer channel join \
    -b "/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/${CHANNEL_NAME}.block" \
    --tls \
    --cafile "/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/ordererOrganizations/loyalty.com/orderers/orderer.loyalty.com/tls/ca.crt"
  
  if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ peer1.bank.loyalty.com ƒë√£ tham gia channel th√†nh c√¥ng${NC}"
  else
    echo -e "${RED}‚ùå peer1.bank.loyalty.com kh√¥ng th·ªÉ tham gia channel${NC}"
    exit 1
  fi
  
  # Update anchor peers
  echo -e "${YELLOW}C·∫≠p nh·∫≠t anchor peers...${NC}"
  docker exec \
    -e CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/bank.loyalty.com/users/Admin@bank.loyalty.com/msp \
    -e CORE_PEER_ADDRESS=peer0.bank.loyalty.com:7051 \
    -e CORE_PEER_LOCALMSPID=BankOrgMSP \
    -e CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/bank.loyalty.com/peers/peer0.bank.loyalty.com/tls/ca.crt \
    cli peer channel update \
    -o orderer.loyalty.com:7050 \
    -c "$CHANNEL_NAME" \
    -f "/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/BankOrgMSPanchors.tx" \
    --tls \
    --cafile "/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/ordererOrganizations/loyalty.com/orderers/orderer.loyalty.com/tls/ca.crt"
  
  echo -e "${GREEN}‚úÖ Anchor peers ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t${NC}"
  echo -e "${GREEN}üéâ M·∫°ng ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng!${NC}"
}

function deployNetwork() {
  echo -e "${BLUE}üöÄ B·∫Øt ƒë·∫ßu tri·ªÉn khai m·∫°ng Hyperledger Fabric (CRYPTOGEN)...${NC}"
  
  # 1. T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c
  createDirectoryStructure
  
  # 2. T·∫°o crypto material v·ªõi cryptogen
  generateCryptoMaterial
  
  # 3. Generate channel artifacts
  generateChannelArtifacts
  
  # 4. Start network
  startNetwork
  
  # 5. Create and join channel
  createAndJoinChannel
  
  echo -e "${GREEN}üéâüéâüéâ M·∫†NG HYPERLEDGER FABRIC ƒê√É ƒê∆Ø·ª¢C TRI·ªÇN KHAI TH√ÄNH C√îNG! üéâüéâüéâ${NC}"
  echo -e "${GREEN}Channel: $CHANNEL_NAME${NC}"
  echo -e "${GREEN}Peers ƒë√£ tham gia: peer0.bank.loyalty.com, peer1.bank.loyalty.com${NC}"
}

function networkStatus() {
  echo -e "${BLUE}üìä Tr·∫°ng th√°i m·∫°ng...${NC}"
  
  echo -e "${YELLOW}=== CONTAINERS ===${NC}"
  docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=orderer.loyalty.com|peer0.bank.loyalty.com|peer1.bank.loyalty.com|cli|couchdb0|couchdb1"
  
  echo -e "\n${YELLOW}=== CHANNEL INFO ===${NC}"
  if docker exec cli peer channel list &>/dev/null; then
    docker exec cli peer channel list
  else
    echo "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin channel"
  fi
}

# ===================================================================================
# MAIN SCRIPT
# ===================================================================================

case "${1:-}" in
  "up"|"start"|"deploy")
    deployNetwork
    ;;
  "down"|"stop"|"clear")
    clearNetwork
    ;;
  "restart")
    clearNetwork
    sleep 5
    deployNetwork
    ;;
  "status")
    networkStatus
    ;;
  *)
    echo -e "${YELLOW}C√°ch s·ª≠ d·ª•ng:${NC}"
    echo -e "  ${GREEN}$0 up|start|deploy${NC}  - Tri·ªÉn khai m·∫°ng"
    echo -e "  ${GREEN}$0 down|stop|clear${NC}   - D·ª´ng v√† d·ªçn d·∫πp m·∫°ng"
    echo -e "  ${GREEN}$0 restart${NC}           - Kh·ªüi ƒë·ªông l·∫°i m·∫°ng"
    echo -e "  ${GREEN}$0 status${NC}            - Ki·ªÉm tra tr·∫°ng th√°i m·∫°ng"
    exit 1
    ;;
esac